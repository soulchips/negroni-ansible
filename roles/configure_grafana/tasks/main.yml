---

# - name: Get host public ip
#   shell: curl checkip.amazonaws.com
#   register: influx_ip

- name: Download Grafana Packages
  get_url:
    url: https://dl.grafana.com/oss/release/grafana_5.4.2_amd64.deb
    dest: "/home/{{ app_code_user }}"

- name: Install list of packages
  apt: name={{item}} state=latest autoclean=yes update_cache=yes
  with_items:
    - adduser
    - libfontconfig

- name: Fix any broken installations
  command: apt-get -f -y install

- name: Install grafana from package
  apt:
    deb: grafana_5.4.2_amd64.deb

- name: Start Grafana Server
  command: /bin/systemctl start grafana-server

- name: Enable Influx Datasource
  uri:
    url: http://{{ lookup('file', 'influxDNS') }}:3000/api/datasources
    method: POST
    user: admin
    password: admin
    body:
      name: "InfluxDB"
      type: "influxdb"
      url: "http://localhost:8086"
      access: "proxy"
      isDefault: true
      database: "{{ influxdb_name }}"
    force_basic_auth: yes
    status_code: 200
    body_format: json

- name: get datasources
  uri:
    url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/datasources/name/InfluxDB"
    user: admin
    password: admin
    force_basic_auth: yes
  register: grafana_influx
  failed_when: false
  changed_when: false

- name: Enable Influx Datasource
  uri:
    url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/datasources"
    method: POST
    user: admin
    password: admin
    body:
    name: "InfluxDB"
    type: "influxdb"
    url: "http://localhost:8086"
    access: "proxy"
    isDefault: true
    database: "influx"
    force_basic_auth: yes
    status_code: 200
    body_format: json
  when: grafana_influx.status == 404
- name: Get current org
  uri:
    url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/org"
    user: admin
    password: admin
    force_basic_auth: yes
  register: grafana_org

- name: Create grafana API key
  uri:
    url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/auth/keys"
    method: POST
    user: admin
    password: admin
    body:
      name: "apikeycurl"
      role: "Admin"
    force_basic_auth: yes
    status_code: 200
    body_format: json
  register: grafana_key

- name: copy dashboard json to server
  copy:
    src: "{{ project_path }}/dashboards/{{ dashboard_config }}"
    dest: "/home/{{ app_code_user }}/{{ dashboard_config }}"
- name: Import Grafana dashboard
  uri:
    url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/dashboards/db"
    method: POST
    body: "{{ lookup('file','/Users/qualitysoul/Projects/JMeter-Cluster/automation-server/dashboards/{{ dashboard_config }}') }}"
    headers:
      Authorization: "Bearer {{ grafana_key.json.key }}"
    status_code: 200
    body_format: json
  register: dashboard_response
