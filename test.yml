---


- name: Create ID storage files
  hosts: local
  connection: local
  tasks:
    - shell: touch influxID allInstanceIDs influxDNS keys/grafana_key

- name: Create Influx instance
  hosts: local
  gather_facts: False
  connection: local
  remote_user: ubuntu
  roles:
    - create_influx_grafana

- hosts: influx
  gather_facts: False
  become: true
  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)


- name: Configure Influx and Grafana
  hosts: influx
  gather_facts: false
  become: true
  roles:
    - configure_influx
    - configure_grafana

- hosts: influx
  gather_facts: False
  become: true
  tasks:
  - name: get datasources
    uri:
      url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/datasources/name/InfluxDB"
      user: admin
      password: admin
      force_basic_auth: yes
    register: grafana_influx
    failed_when: false
    changed_when: false
  - debug:
      var: grafana_influx
  - name: Enable Influx Datasource
    uri:
      url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/datasources"
      method: POST
      user: admin
      password: admin
      body:
        name: "InfluxDB"
        type: "influxdb"
        url: "http://localhost:8086"
        access: "proxy"
        isDefault: true
        database: "influx"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    when: grafana_influx.status == 404
  - name: Get current org
    uri:
      url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/org"
      user: admin
      password: admin
      force_basic_auth: yes
    register: grafana_org
  - debug:
      var: grafana_org
  - name: Create grafana API key
    uri:
      url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/auth/keys"
      method: POST
      user: admin
      password: admin
      body:
        name: "apikeycurl"
        role: "Admin"
      force_basic_auth: yes
      status_code: 200
      body_format: json
    register: grafana_key
  - debug:
      var: grafana_key
  - name: copy dashboard json to server
    copy:
      src: "{{ project_path }}/dashboards/{{ dashboard_config }}"
      dest: "/home/ubuntu/{{ dashboard_config }}" #"/home/{{ app_code_user }}/{{ dashboard_config }}"
  - name: Import Grafana dashboard
    uri:
      url: "http://{{ lookup('file', 'influxDNS') }}:3000/api/dashboards/db"
      method: POST
      body: "{{ lookup('file','/Users/qualitysoul/Projects/JMeter-Cluster/automation-server/dashboards/{{ dashboard_config }}') }}"
      headers:
        Authorization: "Bearer {{ grafana_key.json.key }}"
      status_code: 200
      body_format: json
    register: dashboard_response
  - debug:
      var: dashboard_response